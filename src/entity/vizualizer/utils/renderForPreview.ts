import { isMobile } from 'react-device-detect'
import { Bar } from './Bar'
import { drawCenterImage } from './drawCenterImage'
import { drawFogging } from './drawFogging'
import { drawImage } from './drawImage'
import { gaussSmoothRelativeToNeighbor } from './gaussSmoothRelativeToNeighbor'
import { gaussSmoothRelativeToPrevious } from './gaussSmoothRelativeToPrevious'
import { createBars } from './createBars'
import { mobileCoefficient, fftSize, defaultBarColor } from '../config'

interface ITick {
  canvas: HTMLCanvasElement,
  context: CanvasRenderingContext2D
  image: HTMLImageElement | undefined
  squareImage: HTMLImageElement | undefined
  color: string | undefined,
  isSmallPictureActive: boolean
}

const samples: any = [0.3984375, 0.3671875, 0.359375, 0.3671875, 0.3671875, 0.3671875, 0.359375, 0.3359375, 0.3125, 0.2890625, 0.28125, 0.2734375, 0.2734375, 0.2734375, 0.2578125, 0.234375, 0.2109375, 0.1953125, 0.1875, 0.171875, 0.15625, 0.15625, 0.1484375, 0.125, 0.09375, 0.0703125, 0.046875, 0.015625, -0.0234375, -0.0546875, -0.0859375, -0.1015625, -0.125, -0.140625, -0.171875, -0.1953125, -0.1875, -0.1953125, -0.203125, -0.1953125, -0.1484375, -0.125, -0.171875, -0.2109375, -0.2109375, -0.203125, -0.2421875, -0.296875, -0.3203125, -0.3203125, -0.328125, -0.328125, -0.3125, -0.2734375, -0.25, -0.2578125, -0.28125, -0.2890625, -0.296875, -0.3125, -0.3359375, -0.3515625, -0.3828125, -0.4140625]
const prevVolumes: number[] = [0.40597524888835396, 0.27848816210587024, 0.2703491186134303, 0.2703491186134303, 0.4348149329069854, 0.5008318656777169, 0.5426217486625301, 0.4947578284755994, 0.24289329804636406, 0.19776294828865268, 0.19776294828865268, 0.2903446937671334, 0.24824672067556477, 0.14545864836368122, 0.29772506278896865, 0.7401828395648795, 0.5250665168404224, 0.3334728584740701, 0.6598889413507338, 0.42621555401736355, 0.397106865862376, 0.46195432072185855, 0.6136123832358271, 0.3043320367401792, 0.6691491477766484, 0.5097132396455107, 0.5766276997243156, 0.6134266286188842, 0.5214944331309982, 0.3990007794594859, 0.574999635115798, 0.4686543685001323, 0.21157627167948906, 0.33708810042950477, 0.3931692048223073, 0.463649208652492, 0.579477738012893, 0.3228052418752349, 0.5511516651149522, 0.4917920658521813, 0.2758248875488008, 0.5540019352187087, 0.9097632349555338, 0.21121988115658238, 0.6609568058738461, 0.9670330953526484, 0.44789312729601455, 0.4842578377077109, 0.5767905841201705, 0.49797123353289147, 0.72077920817068, 0.4254529895027833, 0.23207900458179276, 0.3677714148742841, 0.42994598936607453, 0.6111198289808105, 0.524841248261286, 0.39332562541413685, 0.5342689453535909, 0.49329264258205385, 0.31314478158806963, 0.6166642300669327, 0.3987664753251729, 0.21481711482622987, 0.6466163892307226, 0.5264840359056261, 0.5540432479448348, 0.273787791809364, 0.6796531230081607, 0.29798600961499777, 0.4918851377806929, 0.3495793676018791, 0.3495793676018791, 0.4514370753985915, 0.295564670979881, 0.3338801349572073, 0.33101291449208875, 0.43510435058550895, 0.34926959527434603, 0.6842993010717354, 0.4173236753262304, 0.12371933065742116, 0.3457045043228133, 0.13784414053588975, 0.589110063408428, 0.48910867393849705, 0.5387413063144448, 0.20670854861922286, 0.3902292917586843, 0.41653453003259244, 0.18737534511908469, 0.22406949382172361, 0.336707364131019, 0.3199892972110002, 0.3830129915827809, 0.6136955271241652, 0.41516312484016543, 0.4436819104891617, 0.4201160070880674, 0.4715158877077631,0.40597524888835396, 0.27848816210587024, 0.2703491186134303, 0.2703491186134303, 0.4348149329069854, 0.5008318656777169, 0.5426217486625301, 0.4947578284755994, 0.24289329804636406, 0.19776294828865268, 0.19776294828865268, 0.2903446937671334, 0.24824672067556477, 0.14545864836368122, 0.29772506278896865, 0.7401828395648795, 0.5250665168404224, 0.3334728584740701, 0.6598889413507338, 0.42621555401736355, 0.397106865862376, 0.46195432072185855, 0.6136123832358271, 0.3043320367401792, 0.6691491477766484, 0.5097132396455107, 0.5766276997243156, 0.6134266286188842, 0.5214944331309982, 0.3990007794594859, 0.574999635115798, 0.4686543685001323, 0.21157627167948906, 0.33708810042950477, 0.3931692048223073, 0.463649208652492, 0.579477738012893, 0.3228052418752349, 0.5511516651149522, 0.4917920658521813, 0.2758248875488008, 0.5540019352187087, 0.9097632349555338, 0.21121988115658238, 0.6609568058738461, 0.9670330953526484, 0.44789312729601455, 0.4842578377077109, 0.5767905841201705, 0.49797123353289147, 0.72077920817068, 0.4254529895027833, 0.23207900458179276, 0.3677714148742841, 0.42994598936607453, 0.6111198289808105, 0.524841248261286, 0.39332562541413685, 0.5342689453535909, 0.49329264258205385, 0.31314478158806963, 0.6166642300669327, 0.3987664753251729, 0.21481711482622987, 0.6466163892307226, 0.5264840359056261, 0.5540432479448348, 0.273787791809364, 0.6796531230081607, 0.29798600961499777, 0.4918851377806929, 0.3495793676018791, 0.3495793676018791, 0.4514370753985915, 0.295564670979881, 0.3338801349572073, 0.33101291449208875, 0.43510435058550895, 0.34926959527434603, 0.6842993010717354, 0.4173236753262304, 0.12371933065742116, 0.3457045043228133, 0.13784414053588975, 0.589110063408428, 0.48910867393849705, 0.5387413063144448, 0.20670854861922286, 0.3902292917586843, 0.41653453003259244, 0.18737534511908469, 0.22406949382172361, 0.336707364131019, 0.3199892972110002, 0.3830129915827809, 0.6136955271241652, 0.41516312484016543, 0.4436819104891617, 0.4201160070880674, 0.4715158877077631]
const volume = 0.25529779436209854


export const renderForPreview = ({
    canvas,
    context,
    image,
    squareImage,
    color,
    isSmallPictureActive
}: ITick) => {
    context.clearRect(0, 0, canvas.width, canvas.height);
    const bars = createBars({
        canvas,
        fftSize,
    })
    let globalVolume: any = gaussSmoothRelativeToPrevious({
        prevVolumes: prevVolumes,
        smoothingFactor: 0.01,
        volume
    })
    if (image) {
        drawImage({
            context: context,
            canvas: canvas,
            image: image,
            scale: globalVolume
        })
        drawFogging({
            context: context,
            canvas: canvas,
            volume: globalVolume,
        })
    }
    const smoothSampes = gaussSmoothRelativeToNeighbor({
        heights: samples, 
        smoothingFactor: 0.2
    })
    context.save()
    context.translate(0, canvas.height/2)    
    if (image) {
        Bar.drawArray({
            bars: bars,
            samples: smoothSampes,
            canvas: canvas,
            color: color,
            context: context,
            defaultColor: defaultBarColor,
            isMobile: isMobile,
            mobileBarHeightCoefficient: mobileCoefficient
        })
    }
    if (isSmallPictureActive && squareImage) {
        drawCenterImage({
            canvas: canvas,
            context: context,
            image: squareImage
        })
    }
    context.restore()
} 